def recognize_batch(self, img, table_bbox, tokens=None, out_objects=False, out_cells=False,
                  out_html=False, out_csv=False, corresponding_pdf=None, current_page=0, x_crop=0, y_crop=70, img_width=0):
        out_formats = {}
        if self.str_model is None:
            print("No structure model loaded.")
            return out_formats

        if not (out_objects or out_cells or out_html or out_csv):
            print("No output format specified")
            return out_formats

        # Transform the image how the model expects it
        img_tensors = [structure_transform(img).to(self.str_device) for img in imgs]

        # Run input image through the model
        outputs_batch = self.str_model(img_tensors)
        breakpoint()
        # Post-process detected objects, assign class labels
        out_formats_batch = []
        for idx, outputs in enumerate(outputs_batch):
            objects = outputs_to_objects(outputs, imgs[idx].size, self.str_class_idx2name)

            if out_objects:
                out_formats['objects'] = objects
            if not (out_cells or out_html or out_csv):
                return out_formats

            # Further process the detected objects so they correspond to a consistent table 
            tables_structure = objects_to_structures(objects, tokens, self.str_class_thresholds)

            # Enumerate all table cells: grid cells and spanning cells
            tables_cells = [structure_to_cells(structure, tokens, img, corresponding_pdf, current_page, x_crop, y_crop, img_width)[0] for structure in tables_structure]
            if out_cells:
                out_formats['cells'] = tables_cells
            if not (out_html or out_csv):
                return out_formats

            # Convert cells to HTML
            if out_html:
                tables_htmls = [cells_to_html(cells, table_bbox, x_crop=x_crop, y_crop=y_crop) for cells in tables_cells]
                out_formats['html'] = tables_htmls

            # Convert cells to CSV, including flattening multi-row column headers to a single row 
            if out_csv:
                tables_csvs = [cells_to_csv(cells) for cells in tables_cells]
                out_formats['csv'] = tables_csvs
                
            out_formats_batch.append(out_formats)
        return out_formats_batch
