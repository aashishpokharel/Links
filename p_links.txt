def correct_orientation(model, device, img):
    """
    This function accepts an image and corrects its orientation using a pre-trained model.

    Args:
        model: loaded model
        device: str, device to run model on
        img (np.ndarray): The input image as a NumPy array.

    Returns:
        np.ndarray: The corrected image as a NumPy array.
    """
    try:
        corrected_image = img
        result = model.predict(input_data=corrected_image)
        result = next(result)[0]

        initial_label = result['label_names'][0]

        if initial_label == "180":
            corrected_image = cv2.rotate(corrected_image, cv2.ROTATE_180)
            result = model.predict(input_data=corrected_image)
            result = next(result)[0]
            initial_label = result['label_names'][0]

            if initial_label != "0":
                corrected_image = cv2.rotate(corrected_image, cv2.ROTATE_180)

        original_out_img = corrected_image.copy()

        if initial_label != "0":
            if initial_label in ["90", "270"]:
                corrected_image = cv2.rotate(original_out_img, cv2.ROTATE_90_COUNTERCLOCKWISE)
                
                result = model.predict(input_data=corrected_image)
                result = next(result)[0]

                initial_label = result['label_names'][0]

                if initial_label != "0":
                    corrected_image = cv2.rotate(original_out_img, cv2.ROTATE_90_CLOCKWISE)
                    
                    result = model.predict(input_data=corrected_image)
                    result = next(result)[0]

                    initial_label = result['label_names'][0]
                    initial_confidence = result['scores'][0]

        if initial_label != "0":
            result = model.predict(input_data=original_out_img)
            result = next(result)[0]
            initial_label = result['label_names'][1]
            
            if initial_label == "0":
                corrected_image = original_out_img

    except Exception as e:
        raise Exception(f"Error processing: {str(e)}")

    return corrected_image

    # reference_img = preprocess_image(original_reference_img)
    img = np.ones((1024, 1024, 3)) * 255
    dx = 50
    dy = 50
    grid_color = [0, 0, 0]

    img[::dy, :, :] = grid_color
    img[:, ::dx, :] = grid_color
    img = 1 - img/255
    img = img.transpose(2, 0, 1)
    img = torch.from_numpy(img)
    img = img.unsqueeze(0)
    reference_img = img.float()
https://drive.google.com/file/d/1dBZP551vULR4kbxgJXIbsTGevNGmtlqS/view?usp=sharing
https://drive.google.com/file/d/1hhg5ZibX4GAtoQBEINPzv-_W7AW3CLyA/view?usp=sharing
